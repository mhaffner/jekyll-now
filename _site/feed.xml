<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-04-13T16:51:53-05:00</updated><id>http://localhost:4000/</id><title type="html">Matthew Haffner</title><subtitle>PhD Candidate, Graduate Research Assistant</subtitle><entry><title type="html">The Development of shp2nosql</title><link href="http://localhost:4000/shp2nosql/" rel="alternate" type="text/html" title="The Development of shp2nosql" /><published>2017-04-12T00:00:00-05:00</published><updated>2017-04-12T00:00:00-05:00</updated><id>http://localhost:4000/shp2nosql</id><content type="html" xml:base="http://localhost:4000/shp2nosql/">&lt;p&gt;In the early days of my dissertation, I was collecting Twitter data but had no
idea how to store, manage, or query these data. First, I tried PostgreSQL with
PostGIS. I had been wanting to learn PostGIS anyway, not to mention a suitable
alternative to MS SQL Server. After learning PostGIS’s intricacies, I soon found
it was unsuitable for my needs. After some searching, I stumbled upon MongoDB.&lt;/p&gt;

&lt;p&gt;Subsequently, I started using MongoDB to handle my data. Working with MongoDB
requires at least &lt;em&gt;some&lt;/em&gt; knowledge of JavaScript, which I was wanting to learn
anyway, so I didn’t mind this switch. This worked somewhat better than
PostgreSQL since MongoDB is good at handling semi-structured data (like those
from Twitter), but sharding was not intuitive, inserting spatial data was
difficult, and queries were still slow. At the &lt;em&gt;CyberGIS and GeoSpatial Data
Science&lt;/em&gt; conference/workshop at the University of Illinois in the summer of
2016, I was introduced to Elasticsearch.&lt;/p&gt;

&lt;p&gt;So I started using Elasticsearch to handle my data. After many
painstaking attempts to index geographic data in Elasticsearch, I was
becoming concerned that I’d spend the next several years trying a
never-ending list of databases, learning new skills, drowning in the
digital sea….. and never complete my dissertation. Thankfully, with
the help
of
&lt;a href=&quot;https://www.gitbook.com/book/mapbutcher/using-spatial-data-in-elasticsearch/details&quot;&gt;MapButcher’s tutorial&lt;/a&gt;,
I was finally able to index my data and perform spatial queries in a
reasonable amount of time.&lt;/p&gt;

&lt;p&gt;My search for a suitable database stopped after three. This process was
incredibly valuable in that I learned many new skills and created some useful
tools for myself, but ten months had elapsed before I found a suitable workflow.
I thought, &lt;em&gt;What about researchers who don’t have ten months to spare learning
the intricacies of multiple databases&lt;/em&gt;? I now had three different workflows for
working with spatially enabled databases, but each was somewhat clunky. Since I
knew I’d be working with Elasticsearch for quite some time, it was in my best
interest to create something more efficient. If I could make a generalizable
tool, others could benefit from it and avoid some of the mishaps I encountered
along the way. Combine these elements with my need to present something at the
&lt;em&gt;AAG Annual Meeting&lt;/em&gt; (and save dissertation article presentations for later),
and the stars had wonderfully aligned. I decided to create a software tool to
aid geographers in inserting/indexing spatial data.&lt;/p&gt;

&lt;p&gt;There really was no need to create a &lt;em&gt;shapefile to PostGIS&lt;/em&gt; tool, since it
already exists: &lt;code class=&quot;highlighter-rouge&quot;&gt;shp2pgsql&lt;/code&gt;. What I needed (and sought to create) was the NoSQL
equivalent, which I call &lt;code class=&quot;highlighter-rouge&quot;&gt;shp2nosql&lt;/code&gt;. Currently it works with Elaticsearch and
MongoDB, but I’d love others to contribute and make the tool more robust,
suggest new features, and possibly support more databases. Technical details can
be found on my GitHub page &lt;a href=&quot;https://github.com/mhaffner/shp2nosql&quot;&gt;here&lt;/a&gt;, and
the presentation I delivered at the AAG Annual Meeting can be
found &lt;a href=&quot;https://mhaffner.github.io/presentations/shp2nosql.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">In the early days of my dissertation, I was collecting Twitter data but had no idea how to store, manage, or query these data. First, I tried PostgreSQL with PostGIS. I had been wanting to learn PostGIS anyway, not to mention a suitable alternative to MS SQL Server. After learning PostGIS’s intricacies, I soon found it was unsuitable for my needs. After some searching, I stumbled upon MongoDB.</summary></entry><entry><title type="html">The Burnination of the Wordpress</title><link href="http://localhost:4000/first-post/" rel="alternate" type="text/html" title="The Burnination of the Wordpress" /><published>2017-03-30T00:00:00-05:00</published><updated>2017-03-30T00:00:00-05:00</updated><id>http://localhost:4000/first-post</id><content type="html" xml:base="http://localhost:4000/first-post/">&lt;p&gt;I’m currently in the process of moving my blog to GitHub pages. I’m
doing this for several reasons:&lt;/p&gt;

&lt;h1 id=&quot;1-ease-of-creatingpublishing-posts&quot;&gt;(1) Ease of creating/publishing posts&lt;/h1&gt;
&lt;p&gt;On my first few Wordpress posts I typed content directly in Wordpress.
I didn’t mind this at the time, but eventually I started using Emacs
&lt;code class=&quot;highlighter-rouge&quot;&gt;org-mode&lt;/code&gt; for all writing, including research papers, blog posts,
etc. After a semi-debacle of copying an html-exported &lt;code class=&quot;highlighter-rouge&quot;&gt;org&lt;/code&gt; file into
Wordpress, I never posted again. This manual labor approach did not
appeal to me. I discovered that I could host a blog through GitHub
pages and simply push a &lt;code class=&quot;highlighter-rouge&quot;&gt;.md&lt;/code&gt; file to a repository (much like I was
already doing with code repositories) to create a post. This is much,
much easier than what I was doing with Wordpress before. I’m still in
the process of figuring out how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;org-mode&lt;/code&gt; on here, but I’ll be
there soon :)&lt;/p&gt;

&lt;h1 id=&quot;2-version-control&quot;&gt;(2) Version control&lt;/h1&gt;
&lt;p&gt;I have the unfortunate habit of nuking everying I do pretty regularly,
and git makes me forgive myself exceedingly quicker than before.&lt;/p&gt;

&lt;h1 id=&quot;3-less-corporate-controlprofitwhatever&quot;&gt;(3) Less corporate control/profit/whatever&lt;/h1&gt;
&lt;p&gt;No more ads. More control for me. No longer do I get sick when I accidentally
see options to &lt;em&gt;pay&lt;/em&gt; for Wordpress themes thinking about all the innocent people
who have willingly done this (now that I know about Jekyll). &lt;strong&gt;EDIT&lt;/strong&gt;: So I
found out that there are plenty of Jekyll themes you can pay for too. But I can
still avoid seeing this easier on GitHub pages. And I have more control this way.&lt;/p&gt;

&lt;h1 id=&quot;4-easier-to-reflect-changes-to-my-cv&quot;&gt;(4) Easier to reflect changes to my CV&lt;/h1&gt;
&lt;p&gt;Nothing wrong with a little self-promotion on a personal blog, right? With
Wordpress I had to upload my new CV through the web interface &lt;em&gt;every time&lt;/em&gt; I
made a change (which is quite often). I’m still working on this, but I plan on
creating a symbolic link from my CV repository here, so all I’ll have to do is
push the changes to this repository when I update my CV.
&lt;strong&gt;EDIT&lt;/strong&gt;: I’m now doing this with hard links. Setting it up was pretty easy.&lt;/p&gt;</content><author><name></name></author><summary type="html">I’m currently in the process of moving my blog to GitHub pages. I’m doing this for several reasons:</summary></entry></feed>